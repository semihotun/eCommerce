#pragma checksum "C:\Users\Semih\source\repos\eCommerce\eCommerce\Areas\Admin\Views\AdminProduct\ProductPhoto\ProductPhoto.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c23ee028733316e422e435e5562754299c6eb3a9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_AdminProduct_ProductPhoto_ProductPhoto), @"mvc.1.0.view", @"/Areas/Admin/Views/AdminProduct/ProductPhoto/ProductPhoto.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c23ee028733316e422e435e5562754299c6eb3a9", @"/Areas/Admin/Views/AdminProduct/ProductPhoto/ProductPhoto.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_AdminProduct_ProductPhoto_ProductPhoto : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Entities.ViewModels.AdminViewModel.AdminProduct.ProductVM>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<br />

<span></span>
<div class=""row"">
    <form id=""ProductPhotoInsertForm"" class=""col-md-12"">
        <div class=""form form-group col-md-6"">
            <input type=""file"" multiple name=""ResimDosya"" id=""ResimDosya"" class=""form-control"" />
            <input type=""submit"" class=""btn btn-outline-default ml-2"" value=""Ekle"" id=""ProductPhotoInsert"" />
        </div>

    </form>
</div>



");
#nullable restore
#line 17 "C:\Users\Semih\source\repos\eCommerce\eCommerce\Areas\Admin\Views\AdminProduct\ProductPhoto\ProductPhoto.cshtml"
  Html.RenderPartial("ProductPhoto/_ProductPhotoList", Model);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<script>
    var oTable;
    var BindDataTable = function (response) {
        if ($.fn.DataTable.isDataTable(""#ProductPhotoTable"")) {
            oTable.draw();
        }
        else {
            oTable = $(""#ProductPhotoTable"").DataTable({
                ""sAjaxSource"": ""/Admin/ProductPhoto/ProductPhotoList?productId=""+");
#nullable restore
#line 28 "C:\Users\Semih\source\repos\eCommerce\eCommerce\Areas\Admin\Views\AdminProduct\ProductPhoto\ProductPhoto.cshtml"
                                                                            Write(Model.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@",
                ""bServerSide"": true,
                ""bProcessing"": true,
                ""bSearchable"": true,
                ""bLengthChange"": false,
                ""searching"":false,
                ""columns"": [
                    { ""data"": ""Id"",""name"":""Id"",""autoWidth"": true },
                    { ""data"": ""ProductPhotoName"", ""name"": ""ProductPhotoName"", ""autoWidth"": true },
                    {
                        data: null,
                        ""render"": function (data, type, row) {
                            return '<img src=""' + row.ProductPhotoName + '"" height=""175px"">';
                        }, ""orderable"": false
                    },
                    {
                        data: null,
                        ""render"": function (data, type, row) {
                            return '<a class=""btn btn btn-outline-default combinationbtn"" data-target=""#ProductPhotoTableModal"" data-toggle=""modal"" id=""' + row.Id + '"" >Kombinasyon</a>';
                        }, ""o");
            WriteLiteral(@"rderable"": false
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            return ""<a href='#' class='ProductPhotoListDelete' id='"" + row.Id + ""' ><i class='fa fa-trash-o datatablesil ' style='font-size:20px;' ></i></a>"";
                        }, ""orderable"": false
                    },
                ], ""language"": {
                    ""url"": ""/datatablelanguage.json""
                }
            });
        }
    }
    var FilterRecord = function () {
        BindDataTable();
    }
    $(document).ready(function () {
        BindDataTable();
        var productId = $(""#Id"").val();
        var notCheckedCombination = [];
        var checkedCombination = [];
        var initialChecks = [];
        $('#ProductPhotoTable tbody').on('click', '.ProductPhotoListDelete', function () {
            var photoid = $(this).attr('Id');
            var thisFunc = $(this);
        ");
            WriteLiteral(@"    $.ajax({
                type: 'GET',
                dataType: 'json',
                data: 'productId=' + productId,
                url: '/Admin/ProductPhoto/ProductPhotoListDelete?Id=' + photoid + '&ProductId=' + productId,
                success: function (datas) {
                    toastr.success(""Başrıyla Eklendi"");
                    $(thisFunc).parent().parent().remove();
                },
                error: function () {
                    toastr.warning(""Veri silerken hata"");
                },
            });

        });
        $('#ProductPhotoTable tbody').on('click', '.combinationbtn', function () {
            var photoid = $(this).attr('Id');
            $('#photoid').val(photoid);

            $(""#combination"").html(' ');
            $.ajax({
                type: 'GET',
                dataType: 'json',
                data: 'productId=' + productId,
                url: '/Admin/ProductPhoto/PhotoCombinationdata',
                error: function () {");
            WriteLiteral(@"
                    $('#info').html('<p>Hata verdi</p>');
                },
                success: function (datas) {
                    //Combination Checkbox List GET
                    $.each(datas, function (index, value) {
                        $(""<input>"").attr({
                            name: ""combinations"",
                            text: value.Id,
                            id: ""c"" + value.Id,
                            type: ""checkbox"",
                            value: value.Id,
                            checked: false,
                            class: ""combinationcheckbox""
                        }).appendTo(""#combination"");
                        var combinationdvalues = """";
                        $.each(value.AttributesXmlList, function (index1, value1) {
                            combinationdvalues = combinationdvalues + "" "" + value1.ValueName;
                        });
                        $(""#combination"").append(combinationdvalues + ""<br>"");
");
            WriteLiteral(@"
                    });
                    //Seçili checkboxlar GET
                    $.ajax({
                        type: 'GET',
                        dataType: 'json',
                        url: '/Admin/ProductPhoto/PhotoSelectedCombination',
                        data: 'ProductId=' + productId + '&PhotoId=' + photoid,
                        error: function () {
                            $('#info').html('<p>Hata verdi</p>');
                        },
                        success: function (datas) {
                            checkedCombination = [];
                            initialChecks = [];
                            notCheckedCombination = [];
                            $.each(datas, function (index1, value1) {
                                $('#c' + value1.CombinationId).attr('checked', true);
                                initialChecks.push(value1.CombinationId);
                            });
                        },
                    });

       ");
            WriteLiteral(@"             //Checkbox değişim işlemleri
                    $("".combinationcheckbox"").click(function () {
                        //Uncheck olduğunda
                        if ($(this).is(':checked') === false) {
                            //Eğer Başta checklenenler arasında değilse checklenmeyenlere ekle
                            if (initialChecks.filter(x=>x == parseInt($(this).val())).length !== 0) {
                                notCheckedCombination.push(parseInt($(this).val()));
                            }
                            var checkedIndex = checkedCombination.indexOf(parseInt($(this).val()));
                            if (checkedIndex != -1)
                                checkedCombination.splice(checkedIndex);
                        }
                        //Check olduğunda
                        if ($(this).is(':checked') === true) {
                            //Eğer Başta checklenenler arasında değilse checklenmeyenlere ekle
                            if");
            WriteLiteral(@" (initialChecks.filter(x => x == parseInt($(this).val())).length == 0) {
                                checkedCombination.push(parseInt($(this).val()));
                            }
                            var notCheckIndex = notCheckedCombination.indexOf(parseInt($(this).val()));
                            if (notCheckIndex !== -1)
                                notCheckedCombination.splice(notCheckIndex);
                        }
                    });

                },
            });
        });
        $('#ProductPhotoCombinationModalSave').on('click', function () {
            var photoid = $('#photoid').val();

            $.ajax({
                type: 'POST',
                dataType: 'json',
                data: 'ProductId=' + productId + '&PhotoId=' + photoid + '&Combinations=' +
                    checkedCombination + '&NotCombinations=' + notCheckedCombination + '',
                url: '/Admin/ProductPhoto/PhotoCombinationAdded',
                error: functio");
            WriteLiteral(@"n () {
                    toastr.warning(""Eklenirken bi hata"");
                },
                success: function (datas) {
                    toastr.success(""Başrıyla Eklendi"");

                }
            });
        });
        $(""#ProductPhotoInsert"").click(function (e) {
            e.preventDefault();
            var formData = new FormData();
            var files = $(""#ResimDosya"").prop('files');
            for (var i = 0; i < files.length; i++) {
                formData.append(""ResimDosya"", files[i]);
            }
            formData.append(""ProductId"", $(""#Id"").val());
            $.ajax({
                url: ""/Admin/ProductPhoto/AddProductPhoto"",
                data: formData,
                type: 'POST',
                processData: false,
                contentType: false,
                success: function (data) {
                    $(""#ProductPhotoTable"").DataTable().destroy();
                    BindDataTable();
                    swal(""Resim Eklend");
            WriteLiteral("i\", \"\", \"success\");\r\n                },\r\n                error: function (data) {\r\n                    swal(\"Resim Eklerken bir hatayla karşılaşıldı\", \"\", \"error\");\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Entities.ViewModels.AdminViewModel.AdminProduct.ProductVM> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
